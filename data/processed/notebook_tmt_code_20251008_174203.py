#!/usr/bin/env python3
"""
C√ìDIGO PARA EL NOTEBOOK - AN√ÅLISIS TMT CORRECTO
Generado autom√°ticamente el 2025-10-08 17:42:03
"""

# %% TMT Analysis: Automation vs GA Optimization (CORRECT VERSION)
import json
import pandas as pd
import numpy as np
import matplotlib.pyplot as plt
from pathlib import Path
from datetime import datetime

# Setup paths
figures_dir = Path("/Users/gustavo/Documents/Projects/TESIS_UNAL/AutoDOC-MG/results/figures")
figures_dir.mkdir(parents=True, exist_ok=True)
processed_dir = Path("/Users/gustavo/Documents/Projects/TESIS_UNAL/AutoDOC-MG/data/processed")

print("üîç AN√ÅLISIS TMT CORRECTO: AUTOMATIZACI√ìN vs OPTIMIZACI√ìN GA")
print("="*80)
print("üéØ TMT = Total Miscoordination Time (Tiempo Total de Descoordinaci√≥n)")
print("   ‚Ä¢ TMT NEGATIVO = BUENA coordinaci√≥n (menos descoordinaci√≥n)")
print("   ‚Ä¢ TMT POSITIVO = MALA coordinaci√≥n (m√°s descoordinaci√≥n)")
print("   ‚Ä¢ TMT = 0 = PERFECTA coordinaci√≥n")
print("   ‚Ä¢ Mejora TMT = TMT_automatizaci√≥n - TMT_optimizaci√≥n")
print("   ‚Ä¢ Mejora Positiva = TMT se volvi√≥ M√ÅS NEGATIVO (mejor coordinaci√≥n) ‚úÖ")
print("   ‚Ä¢ Mejora Negativa = TMT se volvi√≥ MENOS NEGATIVO (peor coordinaci√≥n) ‚ùå")

# Load comparison data
comparison_files = list(processed_dir.glob("tmt_automation_vs_ga_final_*.json"))
if comparison_files:
    latest_comparison = max(comparison_files, key=lambda x: x.stat().st_mtime)
    print(f"\nüìÇ Loading comparison data from: {latest_comparison.name}")
    
    with open(latest_comparison, 'r', encoding='utf-8') as f:
        comparison_data = json.load(f)
    
    scenarios = comparison_data['scenario_comparisons']
    metadata = comparison_data['metadata']
    
    print(f"\nüìä RESULTADOS DE COMPARACI√ìN:")
    print("="*80)
    print(f"   ‚Ä¢ Total escenarios: {metadata['total_scenarios']}")
    print(f"   ‚Ä¢ Escenarios mejorados: {metadata['improved_scenarios']} ({metadata['success_rate']:.1f}%)")
    print(f"   ‚Ä¢ Escenarios degradados: {metadata['degraded_scenarios']}")
    print(f"   ‚Ä¢ TMT promedio automatizaci√≥n: {metadata['avg_automation_tmt']:.3f}s")
    print(f"   ‚Ä¢ TMT promedio optimizaci√≥n: {metadata['avg_ga_tmt']:.3f}s")
    print(f"   ‚Ä¢ Mejora promedio TMT: {metadata['avg_improvement']:.3f}s")
    
    # Create DataFrame
    df = pd.DataFrame(scenarios)
    df = df.sort_values('tmt_improvement', ascending=False).reset_index(drop=True)
    
    # Display sample data
    print(f"\nüìã MUESTRA DE DATOS (Top 10):")
    display_cols = ['scenario_id', 'automation_tmt', 'ga_tmt', 'tmt_improvement', 'improvement_percentage', 'status']
    display(df[display_cols].head(10))
    
else:
    print("‚ùå No comparison data found!")
    print("Please run the TMT comparison analysis first.")

# %% Create TMT Comparison Visualization (CORRECT VERSION)
def create_tmt_comparison_plot(df):
    """Create comprehensive TMT comparison plot with correct interpretation"""
    
    # Set up the plot style
    plt.style.use('default')
    fig, ((ax1, ax2), (ax3, ax4)) = plt.subplots(2, 2, figsize=(20, 16))
    
    # Get top 30 scenarios for better visualization
    top_30 = df.head(30)
    x = np.arange(len(top_30))
    width = 0.35
    
    # Plot 1: TMT Before vs After (Bar chart)
    bars1 = ax1.bar(x - width/2, top_30['automation_tmt'], width, 
                   label='TMT Automatizaci√≥n', color='#e74c3c', alpha=0.8)
    bars2 = ax1.bar(x + width/2, top_30['ga_tmt'], width, 
                   label='TMT Optimizaci√≥n GA', color='#3498db', alpha=0.8)
    
    ax1.set_xlabel('Escenario', fontsize=12)
    ax1.set_ylabel('TMT (segundos)', fontsize=12)
    ax1.set_title('Comparaci√≥n TMT: Automatizaci√≥n vs Optimizaci√≥n GA\n(Top 30 Escenarios - Valores Negativos = Mejor)', 
                  fontsize=14, fontweight='bold')
    ax1.set_xticks(x[::3])
    ax1.set_xticklabels([top_30.iloc[i]['scenario_id'] for i in range(0, len(top_30), 3)], 
                       rotation=45, ha='right')
    ax1.legend(fontsize=12)
    ax1.grid(True, alpha=0.3)
    
    # Add value labels for first 10 scenarios
    for i in range(min(10, len(top_30))):
        ax1.text(i - width/2, top_30.iloc[i]['automation_tmt'] - 0.5, 
                f'{top_30.iloc[i]["automation_tmt"]:.1f}', 
                ha='center', va='top', fontsize=8)
        ax1.text(i + width/2, top_30.iloc[i]['ga_tmt'] - 0.5, 
                f'{top_30.iloc[i]["ga_tmt"]:.1f}', 
                ha='center', va='top', fontsize=8)
    
    # Plot 2: TMT Improvement (Bar chart with colors)
    colors = ['#2ecc71' if imp > 0 else '#e74c3c' for imp in top_30['tmt_improvement']]
    bars3 = ax2.bar(x, top_30['tmt_improvement'], color=colors, alpha=0.7)
    
    ax2.axhline(y=0, color='black', linestyle='-', linewidth=0.8)
    ax2.set_xlabel('Escenario', fontsize=12)
    ax2.set_ylabel('Mejora TMT (segundos)', fontsize=12)
    ax2.set_title('Mejora/Degradaci√≥n TMT por Escenario\n(Verde = Mejora, Rojo = Degradaci√≥n)', 
                  fontsize=14, fontweight='bold')
    ax2.set_xticks(x[::3])
    ax2.set_xticklabels([top_30.iloc[i]['scenario_id'] for i in range(0, len(top_30), 3)], 
                       rotation=45, ha='right')
    ax2.grid(True, alpha=0.3)
    
    # Add improvement labels for significant changes
    for i, (imp, bar) in enumerate(zip(top_30['tmt_improvement'], bars3)):
        if abs(imp) > 0.5:
            ax2.text(i, imp + (0.1 if imp > 0 else -0.1), f'{imp:.2f}s', 
                    ha='center', va='bottom' if imp > 0 else 'top', 
                    fontsize=8, fontweight='bold')
    
    # Plot 3: TMT Distribution
    ax3.hist(df['automation_tmt'], bins=20, alpha=0.7, label='TMT Automatizaci√≥n', 
             color='#e74c3c', density=True, edgecolor='black')
    ax3.hist(df['ga_tmt'], bins=20, alpha=0.7, label='TMT Optimizaci√≥n GA', 
             color='#3498db', density=True, edgecolor='black')
    ax3.set_xlabel('TMT (segundos)', fontsize=12)
    ax3.set_ylabel('Densidad', fontsize=12)
    ax3.set_title('Distribuci√≥n TMT: Automatizaci√≥n vs Optimizaci√≥n GA\n(Valores Negativos = Mejor Coordinaci√≥n)', 
                  fontsize=14, fontweight='bold')
    ax3.legend(fontsize=12)
    ax3.grid(True, alpha=0.3)
    
    # Plot 4: Improvement Distribution
    ax4.hist(df['tmt_improvement'], bins=20, alpha=0.7, color='#2ecc71', 
             density=True, edgecolor='black')
    ax4.axvline(x=0, color='red', linestyle='--', linewidth=2, label='Sin Cambio')
    ax4.set_xlabel('Mejora TMT (segundos)', fontsize=12)
    ax4.set_ylabel('Densidad', fontsize=12)
    ax4.set_title('Distribuci√≥n de Mejora TMT\n(Positivo = Mejora, Negativo = Degradaci√≥n)', 
                  fontsize=14, fontweight='bold')
    ax4.legend(fontsize=12)
    ax4.grid(True, alpha=0.3)
    
    plt.tight_layout()
    
    # Save plot
    timestamp = datetime.now().strftime("%Y%m%d_%H%M%S")
    plot_file = figures_dir / f"tmt_automation_vs_ga_correct_20251008_174203.png"
    plt.savefig(plot_file, dpi=300, bbox_inches='tight')
    plt.show()
    
    print(f"üìä TMT comparison plot saved: {plot_file}")
    return plot_file

if 'df' in locals() and not df.empty:
    create_tmt_comparison_plot(df)
else:
    print("‚ùå No data available for plotting")

# %% Summary and Recommendations (CORRECT VERSION)
if 'metadata' in locals():
    print("üéØ RESUMEN FINAL: AUTOMATIZACI√ìN vs OPTIMIZACI√ìN GA")
    print("="*80)
    
    print(f"üìä RESULTADOS GENERALES:")
    print(f"   ‚Ä¢ Total escenarios analizados: {metadata['total_scenarios']}")
    print(f"   ‚Ä¢ Tasa de √©xito: {metadata['success_rate']:.1f}% ({metadata['improved_scenarios']} escenarios mejoraron)")
    print(f"   ‚Ä¢ Tasa de degradaci√≥n: {100-metadata['success_rate']:.1f}% ({metadata['degraded_scenarios']} escenarios empeoraron)")
    print(f"   ‚Ä¢ TMT promedio automatizaci√≥n: {metadata['avg_automation_tmt']:.3f} segundos")
    print(f"   ‚Ä¢ TMT promedio optimizaci√≥n: {metadata['avg_ga_tmt']:.3f} segundos")
    print(f"   ‚Ä¢ Cambio promedio TMT: {metadata['avg_improvement']:.3f} segundos")
    
    print(f"\nüéØ INTERPRETACI√ìN CORRECTA:")
    print(f"   ‚Ä¢ TMT NEGATIVO = BUENA coordinaci√≥n")
    print(f"   ‚Ä¢ TMT POSITIVO = MALA coordinaci√≥n")
    if metadata['success_rate'] > 50:
        print(f"   ‚úÖ La optimizaci√≥n GA fue EXITOSA en la mayor√≠a de escenarios")
    elif metadata['success_rate'] > 25:
        print(f"   ‚ö†Ô∏è  La optimizaci√≥n GA tuvo √©xito MODERADO")
    else:
        print(f"   ‚ùå La optimizaci√≥n GA tuvo √©xito LIMITADO")
    
    if metadata['avg_improvement'] > 0:
        print(f"   ‚úÖ En promedio, el TMT se volvi√≥ M√ÅS NEGATIVO ({metadata['avg_improvement']:.3f}s mejor)")
    else:
        print(f"   ‚ùå En promedio, el TMT se volvi√≥ MENOS NEGATIVO ({abs(metadata['avg_improvement']):.3f}s peor)")
    
    print(f"\nüí° RECOMENDACIONES:")
    print(f"   1. Aumentar generaciones GA de 1,000 a 5,000-10,000")
    print(f"   2. Investigar escenarios exitosos para replicar estrategias")
    print(f"   3. Revisar par√°metros GA para mejor convergencia")
    print(f"   4. Validar datos de entrada para escenarios problem√°ticos")
    print(f"   5. Considerar diferentes estrategias para escenarios complejos")
    
    print(f"\n‚úÖ An√°lisis TMT correcto completado!")
else:
    print("‚ùå No metadata available for summary")
